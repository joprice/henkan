
lazy val henkan = project.in(file("."))
  .settings(moduleName := "henkan-all")
  .aggregate(core, tests, examples, docs, extension)
  .settings(Common.settings:_*)
  .settings(Common.noPublishing: _*)

lazy val core = project.in(file("core"))
  .settings(moduleName := "henkan")
  .settings(Common.settings:_*)
  .settings(Dependencies.settings:_*)
  .settings(Publish.settings:_*)
  .settings(Format.settings:_*)

lazy val tests = project.in(file("tests"))
  .dependsOn(core, extension)
  .aggregate(core, extension, docs)
  .settings(moduleName := "henkan-tests")
  .settings(Common.settings:_*)
  .settings(Common.noPublishing: _*)
  .settings(Dependencies.testSettings:_*)
  .settings(Format.settings:_*)
  .settings(Testing.settings:_*)

lazy val examples = project.in(file("examples"))
  .dependsOn(core)
  .aggregate(core)
  .settings(moduleName := "henkan-examples")
  .settings(Common.settings:_*)
  .settings(Dependencies.settings:_*)
  .settings(Common.noPublishing: _*)
  .settings(Format.settings:_*)

lazy val extension = project.in(file("extension"))
  .dependsOn(core)
  .aggregate(core)
  .settings(moduleName := "henkan-extension")
  .settings(Common.settings:_*)
  .settings(Dependencies.settings:_*)
  .settings(Format.settings:_*)

lazy val docs = project.in(file("docs"))
  .dependsOn(core, extension)
  .settings(compile <<= (compile in Compile).dependsOn(tut))
  .settings(test <<= (test in Test).dependsOn(tut))
  .settings(moduleName := "henkan-docs")
  .settings(Dependencies.settings:_*)
  .settings(tutSettings)
  .settings(tutScalacOptions ~= (_.filterNot(Set("-Ywarn-unused-import", "-Ywarn-dead-code"))))
  .settings(tutTargetDirectory := file("."))
  .settings(Common.noPublishing: _*)
